name: Debug Auth Outputs

on:
  workflow_dispatch:

jobs:
  debug-auth-outputs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      id-token: write
      contents: read
    
    env:
      GCP_PROJECT: sac-vald-hub
      BQ_DATASET: analytics
    
    steps:
      - uses: actions/checkout@v4
      
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/884700516106/locations/global/workloadIdentityPools/gha-pool/providers/github
          service_account: gha-bq@sac-vald-hub.iam.gserviceaccount.com
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '3600s'
      
      - name: Debug Auth Step Outputs
        run: |
          echo "=== Auth Step Outputs ==="
          echo "Auth step access_token output: ${{ steps.auth.outputs.access_token }}"
          echo "Auth step token output: ${{ steps.auth.outputs.token }}"
          echo "Auth step credentials_file_path: ${{ steps.auth.outputs.credentials_file_path }}"
          
          echo "=== Environment Variables ==="
          echo "GOOGLE_ACCESS_TOKEN: $GOOGLE_ACCESS_TOKEN"
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "GCLOUD_ACCESS_TOKEN: $GCLOUD_ACCESS_TOKEN"
          
          echo "=== All environment variables containing GOOGLE or TOKEN ==="
          env | grep -i -E "(google|token)" || echo "No matching environment variables found"
      
      - name: Try gcloud to get access token
        run: |
          echo "=== Getting access token via gcloud ==="
          gcloud auth print-access-token > access_token.txt
          echo "Access token length: $(wc -c < access_token.txt)"
          echo "First 20 chars: $(head -c 20 access_token.txt)..."
          
          # Set as environment variable for next step
          echo "MANUAL_ACCESS_TOKEN=$(cat access_token.txt)" >> $GITHUB_ENV
      
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      
      - name: Install R packages
        run: |
          R -q -e "install.packages(c('bigrquery', 'DBI', 'httr'), repos='https://packagemanager.posit.co/cran/__linux__/noble/latest')"
      
      - name: Test with manual access token
        run: |
          R -q -e "
          cat('=== Testing with Manual Access Token ===\n')
          
          library(bigrquery)
          library(DBI)
          library(httr)
          
          # Use the access token we got from gcloud
          access_token <- Sys.getenv('MANUAL_ACCESS_TOKEN')
          cat('Manual access token length:', nchar(access_token), '\n')
          
          if (nchar(access_token) > 0) {
            cat('Testing direct BigQuery API call...\n')
            tryCatch({
              url <- paste0('https://bigquery.googleapis.com/bigquery/v2/projects/', Sys.getenv('GCP_PROJECT'), '/datasets')
              response <- GET(url, add_headers(Authorization = paste('Bearer', access_token)))
              
              if (status_code(response) == 200) {
                cat('Direct API call SUCCESS\n')
                
                # Now try to use this token with bigrquery
                cat('Setting token for bigrquery...\n')
                
                # Method 1: Try setting environment variable
                Sys.setenv(GOOGLE_ACCESS_TOKEN = access_token)
                
                # Clear any existing auth
                bq_deauth()
                
                # Try to authenticate
                bq_auth()
                
                # Test BigQuery connection
                con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
                result <- dbGetQuery(con, 'SELECT 1 as test_value')
                dbDisconnect(con)
                
                cat('BigQuery connection test PASSED\n')
                cat('SUCCESS: Authentication working with manual access token\n')
                
              } else {
                cat('Direct API call failed with status:', status_code(response), '\n')
                cat('Response content:', content(response, as = 'text'), '\n')
              }
              
            }, error = function(e) {
              cat('Error:', e\$message, '\n')
            })
          } else {
            cat('No manual access token available\n')
          }
          "
      
      - name: Summary
        if: always()
        run: |
          echo "=== Summary ==="
          echo "This checks auth step outputs and tries to get access token manually via gcloud."
