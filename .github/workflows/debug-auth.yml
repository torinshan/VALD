name: Debug Authentication

on:
  workflow_dispatch:

jobs:
  debug-auth:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      id-token: write
      contents: read
    
    env:
      GCP_PROJECT: sac-vald-hub
      BQ_DATASET: analytics
    
    steps:
      - uses: actions/checkout@v4
      
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/884700516106/locations/global/workloadIdentityPools/gha-pool/providers/github
          service_account: gha-bq@sac-vald-hub.iam.gserviceaccount.com
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '3600s'
      
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: sac-vald-hub
          install_components: bq
      
      - name: Debug Environment Variables
        run: |
          echo "=== Environment Variables ==="
          echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "GOOGLE_GHA_CREDS_PATH: $GOOGLE_GHA_CREDS_PATH"
          echo "GCLOUD_PROJECT: $GCLOUD_PROJECT"
          echo "GOOGLE_CLOUD_PROJECT: $GOOGLE_CLOUD_PROJECT"
          echo "GCP_PROJECT: $GCP_PROJECT"
          echo "BQ_DATASET: $BQ_DATASET"
          
      - name: Debug File System
        run: |
          echo "=== File System Debug ==="
          echo "Working directory: $(pwd)"
          echo "Files in working directory:"
          ls -la
          echo "Looking for credential files:"
          find . -name "*creds*" -o -name "*.json" | head -10
          if [[ -n "$GOOGLE_APPLICATION_CREDENTIALS" ]]; then
            echo "Credentials file details:"
            ls -la "$GOOGLE_APPLICATION_CREDENTIALS" || echo "Credentials file not found"
            if [[ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]]; then
              echo "First 100 characters of credentials file:"
              head -c 100 "$GOOGLE_APPLICATION_CREDENTIALS"
            fi
          fi
      
      - name: Test gcloud Authentication
        run: |
          echo "=== Testing gcloud Authentication ==="
          gcloud auth list
          echo "Active account:"
          gcloud auth list --filter=status:ACTIVE --format="value(account)"
          echo "Testing gcloud access:"
          gcloud projects describe $GCP_PROJECT || echo "gcloud project access failed"
      
      - name: Test BigQuery CLI
        run: |
          echo "=== Testing BigQuery CLI ==="
          bq ls --project_id=$GCP_PROJECT || echo "BigQuery CLI access failed"
          bq query --use_legacy_sql=false --location=US "SELECT 1 as test" || echo "BigQuery query failed"
      
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      
      - name: Install minimal R packages
        run: |
          R -q -e "
          install.packages(c('bigrquery', 'DBI'), repos='https://packagemanager.posit.co/cran/__linux__/noble/latest')
          "
      
      - name: Test R Authentication Methods
        run: |
          R -q -e "
          cat('=== R Authentication Test ===\n')
          
          library(bigrquery)
          library(DBI)
          
          cat('Environment variables in R:\n')
          cat('GOOGLE_APPLICATION_CREDENTIALS:', Sys.getenv('GOOGLE_APPLICATION_CREDENTIALS'), '\n')
          cat('GCP_PROJECT:', Sys.getenv('GCP_PROJECT'), '\n')
          
          creds_file <- Sys.getenv('GOOGLE_APPLICATION_CREDENTIALS')
          cat('Credentials file path:', creds_file, '\n')
          cat('File exists:', file.exists(creds_file), '\n')
          
          # Method 1: Default bq_auth() - no parameters
          cat('\n--- Method 1: Default bq_auth() ---\n')
          tryCatch({
            bq_auth()
            cat('Method 1 SUCCESS: Default bq_auth()\n')
            
            # Test BigQuery connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Authentication working with default bq_auth()\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 1 FAILED:', e\$message, '\n')
          })
          
          # Method 2: bq_auth with explicit path
          cat('\n--- Method 2: bq_auth(path = file) ---\n')
          tryCatch({
            bq_auth(path = creds_file)
            cat('Method 2 SUCCESS: bq_auth with path\n')
            
            # Test BigQuery connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Authentication working with explicit path\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 2 FAILED:', e\$message, '\n')
          })
          
          # Method 3: Use gargle directly
          cat('\n--- Method 3: Using gargle directly ---\n')
          tryCatch({
            library(gargle)
            cat('Trying gargle::credentials_service_account()\n')
            token <- credentials_service_account(path = creds_file)
            cat('Gargle token created successfully\n')
            
            # Set the token for bigrquery
            bq_auth(token = token)
            cat('Method 3 SUCCESS: gargle token\n')
            
            # Test BigQuery connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Authentication working with gargle token\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 3 FAILED:', e\$message, '\n')
          })
          
          # Method 4: Set GOOGLE_APPLICATION_CREDENTIALS and restart session
          cat('\n--- Method 4: Reset and try again ---\n')
          tryCatch({
            # Clear any existing auth
            bq_deauth()
            cat('Cleared existing auth\n')
            
            # Set environment variable explicitly
            Sys.setenv(GOOGLE_APPLICATION_CREDENTIALS = creds_file)
            cat('Set GOOGLE_APPLICATION_CREDENTIALS explicitly\n')
            
            # Try auth again
            bq_auth()
            cat('Method 4 SUCCESS: After reset\n')
            
            # Test BigQuery connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Authentication working after reset\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 4 FAILED:', e\$message, '\n')
          })
          
          # Method 5: Check if its a scope issue
          cat('\n--- Method 5: Try with specific scopes ---\n')
          tryCatch({
            bq_deauth()
            bq_auth(scopes = 'https://www.googleapis.com/auth/bigquery')
            cat('Method 5 SUCCESS: With specific scopes\n')
            
            # Test BigQuery connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Authentication working with specific scopes\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 5 FAILED:', e\$message, '\n')
          })
          
          # Method 6: Check the credentials file content format
          cat('\n--- Method 6: Debug credentials file format ---\n')
          tryCatch({
            library(jsonlite)
            creds_content <- fromJSON(creds_file)
            cat('Credentials file type:', creds_content\$type, '\n')
            cat('Available fields:', paste(names(creds_content), collapse=', '), '\n')
            
            if ('type' %in% names(creds_content) && creds_content\$type == 'external_account') {
              cat('This is a workload identity federation credential\n')
              cat('Audience:', creds_content\$audience, '\n')
              cat('Subject token type:', creds_content\$subject_token_type, '\n')
            }
            
          }, error = function(e) {
            cat('Method 6 FAILED:', e\$message, '\n')
          })
          
          cat('\n=== All authentication methods failed ===\n')
          quit(status = 1)
          "
      
      - name: Summary
        if: always()
        run: |
          echo "=== Debug Summary ==="
          echo "Check the logs above to identify where authentication is failing."
          echo "The test progresses through: Environment -> Files -> gcloud -> bq CLI -> R"
