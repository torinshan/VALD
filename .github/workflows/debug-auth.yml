name: Debug Token Object

on:
  workflow_dispatch:

jobs:
  debug-token-object:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      id-token: write
      contents: read
    
    env:
      GCP_PROJECT: sac-vald-hub
      BQ_DATASET: analytics
    
    steps:
      - uses: actions/checkout@v4
      
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/884700516106/locations/global/workloadIdentityPools/gha-pool/providers/github
          service_account: gha-bq@sac-vald-hub.iam.gserviceaccount.com
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '3600s'
      
      - name: Get access token
        run: |
          gcloud auth print-access-token > access_token.txt
          echo "MANUAL_ACCESS_TOKEN=$(cat access_token.txt)" >> $GITHUB_ENV
      
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      
      - name: Install R packages
        run: |
          R -q -e "install.packages(c('bigrquery', 'DBI', 'httr', 'gargle'), repos='https://packagemanager.posit.co/cran/__linux__/noble/latest')"
      
      - name: Test Token Object Creation
        run: |
          R -q -e "
          cat('=== Testing Token Object Creation ===\n')
          
          library(bigrquery)
          library(DBI)
          library(httr)
          library(gargle)
          
          access_token <- Sys.getenv('MANUAL_ACCESS_TOKEN')
          cat('Access token length:', nchar(access_token), '\n')
          
          # Method 1: Create httr token object
          cat('\n--- Method 1: httr Token2.0 object ---\n')
          tryCatch({
            # Create Token2.0 object
            token_obj <- Token2.0\$new(
              app = oauth_app('bigrquery', key = '', secret = ''),
              endpoint = oauth_endpoints('google'),
              credentials = list(access_token = access_token),
              cache = FALSE
            )
            
            cat('Token2.0 object created\n')
            
            # Set for bigrquery
            bq_auth(token = token_obj)
            cat('Token set for bigrquery\n')
            
            # Test connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Method 1 works\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 1 FAILED:', e\$message, '\n')
          })
          
          # Method 2: Use gargle credentials
          cat('\n--- Method 2: gargle credentials ---\n')
          tryCatch({
            # Create credentials using gargle
            cred <- gargle::credentials_byo_oauth2(
              token = list(access_token = access_token)
            )
            
            cat('Gargle credentials created\n')
            
            # Set for bigrquery
            bq_auth(token = cred)
            cat('Credentials set for bigrquery\n')
            
            # Test connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Method 2 works\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 2 FAILED:', e\$message, '\n')
          })
          
          # Method 3: Simple token list
          cat('\n--- Method 3: Simple token list ---\n')
          tryCatch({
            # Create simple token structure
            simple_token <- list(
              access_token = access_token,
              token_type = 'Bearer'
            )
            
            cat('Simple token created\n')
            
            # Set for bigrquery
            bq_auth(token = simple_token)
            cat('Simple token set for bigrquery\n')
            
            # Test connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Method 3 works\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 3 FAILED:', e\$message, '\n')
          })
          
          # Method 4: Direct gargle token
          cat('\n--- Method 4: Direct gargle token ---\n')
          tryCatch({
            # Use gargle to create proper token
            token <- gargle::gargle2.0_token(
              scope = 'https://www.googleapis.com/auth/bigquery',
              app = gargle::gargle_app(),
              credentials = list(access_token = access_token)
            )
            
            cat('Gargle token created\n')
            
            # Set for bigrquery
            bq_auth(token = token)
            cat('Gargle token set for bigrquery\n')
            
            # Test connection
            con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
            result <- dbGetQuery(con, 'SELECT 1 as test_value')
            dbDisconnect(con)
            
            cat('BigQuery connection test PASSED\n')
            cat('SUCCESS: Method 4 works\n')
            quit(status = 0)
            
          }, error = function(e) {
            cat('Method 4 FAILED:', e\$message, '\n')
          })
          
          cat('\nAll token object methods failed\n')
          quit(status = 1)
          "
      
      - name: Summary
        if: always()
        run: |
          echo "=== Summary ==="
          echo "Testing different ways to create token objects that bigrquery can use."
