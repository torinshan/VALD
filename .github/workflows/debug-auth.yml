name: Debug Access Token

on:
  workflow_dispatch:

jobs:
  debug-token:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      id-token: write
      contents: read
    
    env:
      GCP_PROJECT: sac-vald-hub
      BQ_DATASET: analytics
    
    steps:
      - uses: actions/checkout@v4
      
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/884700516106/locations/global/workloadIdentityPools/gha-pool/providers/github
          service_account: gha-bq@sac-vald-hub.iam.gserviceaccount.com
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '3600s'
      
      - name: Debug Access Token
        run: |
          echo "=== Access Token Debug ==="
          echo "GOOGLE_ACCESS_TOKEN set: $([ -n "$GOOGLE_ACCESS_TOKEN" ] && echo "YES" || echo "NO")"
          echo "GOOGLE_ACCESS_TOKEN length: ${#GOOGLE_ACCESS_TOKEN}"
          if [[ -n "$GOOGLE_ACCESS_TOKEN" ]]; then
            echo "First 20 chars: ${GOOGLE_ACCESS_TOKEN:0:20}..."
          fi
      
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      
      - name: Install R packages
        run: |
          R -q -e "install.packages(c('bigrquery', 'DBI', 'httr'), repos='https://packagemanager.posit.co/cran/__linux__/noble/latest')"
      
      - name: Test Access Token Authentication
        run: |
          R -q -e "
          cat('=== Testing Access Token Authentication ===\n')
          
          library(bigrquery)
          library(DBI)
          library(httr)
          
          # Check if access token is available
          access_token <- Sys.getenv('GOOGLE_ACCESS_TOKEN')
          cat('Access token available:', nchar(access_token) > 0, '\n')
          cat('Access token length:', nchar(access_token), '\n')
          
          if (nchar(access_token) > 0) {
            cat('First 20 characters:', substr(access_token, 1, 20), '...\n')
            
            # Method A: Use access token directly with httr
            cat('\n--- Method A: Direct API call with access token ---\n')
            tryCatch({
              # Test direct BigQuery API call
              url <- paste0('https://bigquery.googleapis.com/bigquery/v2/projects/', Sys.getenv('GCP_PROJECT'), '/datasets')
              response <- GET(url, add_headers(Authorization = paste('Bearer', access_token)))
              
              if (status_code(response) == 200) {
                cat('Direct API call SUCCESS\n')
                content_data <- content(response, as = 'parsed')
                cat('Found', length(content_data\$datasets), 'datasets\n')
              } else {
                cat('Direct API call FAILED with status:', status_code(response), '\n')
              }
              
            }, error = function(e) {
              cat('Method A FAILED:', e\$message, '\n')
            })
            
            # Method B: Create OAuth token object for bigrquery
            cat('\n--- Method B: OAuth token for bigrquery ---\n')
            tryCatch({
              # Create token object
              token_obj <- oauth2.0_token(
                endpoint = oauth_endpoints('google'),
                app = oauth_app('bigrquery', key = 'dummy', secret = 'dummy'),
                credentials = list(access_token = access_token)
              )
              
              # Set token for bigrquery
              bq_auth(token = token_obj)
              cat('Token object created and set\n')
              
              # Test BigQuery connection
              con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
              result <- dbGetQuery(con, 'SELECT 1 as test_value')
              dbDisconnect(con)
              cat('BigQuery connection test PASSED\n')
              cat('Method B SUCCESS: OAuth token approach\n')
              quit(status = 0)
              
            }, error = function(e) {
              cat('Method B FAILED:', e\$message, '\n')
            })
            
            # Method C: Set token as environment variable for gargle
            cat('\n--- Method C: Environment variable approach ---\n')
            tryCatch({
              # Set the token for gargle to find
              Sys.setenv(GARGLE_OAUTH_TOKEN = access_token)
              
              # Clear existing auth and try again
              bq_deauth()
              bq_auth()
              
              # Test BigQuery connection
              con <- dbConnect(bigquery(), project = Sys.getenv('GCP_PROJECT'))
              result <- dbGetQuery(con, 'SELECT 1 as test_value')
              dbDisconnect(con)
              cat('BigQuery connection test PASSED\n')
              cat('Method C SUCCESS: Environment variable approach\n')
              quit(status = 0)
              
            }, error = function(e) {
              cat('Method C FAILED:', e\$message, '\n')
            })
            
          } else {
            cat('No access token found in environment\n')
          }
          
          cat('All access token methods failed\n')
          quit(status = 1)
          "
      
      - name: Summary
        if: always()
        run: |
          echo "=== Summary ==="
          echo "This test checks if we can use the access token instead of the credentials file."
