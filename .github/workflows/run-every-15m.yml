name: R → BigQuery every 15m (WIF)

on:
  schedule:
    - cron: "*/15 * * * *" # UTC; we'll gate by PT below
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    concurrency:
      group: vald-q15
      cancel-in-progress: false

    permissions:
      id-token: write
      contents: read

    env:
      GCP_PROJECT: sac-vald-hub
      BQ_DATASET: analytics

    steps:
      # Gate the workflow by Pacific Time (DST-safe)
      - name: Allow only 6am–8pm America/Los_Angeles
        id: window
        shell: bash
        run: |
          hour=$(TZ=America/Los_Angeles date +%H)
          if [ "$hour" -ge 6 ] && [ "$hour" -lt 20 ]; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
            echo "Within allowed PT window"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "Outside 6am–8pm PT window — skipping."
          fi

      - name: Stop if outside the window
        if: steps.window.outputs.ok != 'true'
        run: exit 0

      - uses: actions/checkout@v4
        if: steps.window.outputs.ok == 'true'

      - id: auth
        if: steps.window.outputs.ok == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/884700516106/locations/global/workloadIdentityPools/gha-pool/providers/github
          service_account: gha-bq@sac-vald-hub.iam.gserviceaccount.com
          create_credentials_file: true
          token_format: 'access_token'
          access_token_lifetime: '3600s'

      - name: Setup gcloud SDK
        if: steps.window.outputs.ok == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: sac-vald-hub
          install_components: bq

      - name: Test GCP Authentication
        if: steps.window.outputs.ok == 'true'
        run: |
          gcloud auth list
          bq ls --project_id=sac-vald-hub || echo "BigQuery test failed"

      - uses: r-lib/actions/setup-r@v2
        if: steps.window.outputs.ok == 'true'
        with:
          use-public-rspm: true

      # Cache R packages to speed up builds
      - name: Cache R packages
        if: steps.window.outputs.ok == 'true'
        uses: actions/cache@v3
        with:
          path: /home/runner/work/_temp/Library
          key: ${{ runner.os }}-r-${{ hashFiles('**/*.R') }}
          restore-keys: |
            ${{ runner.os }}-r-

      - name: System libs
        if: steps.window.outputs.ok == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libfontconfig1-dev libfreetype6-dev libpng-dev \
            libtiff5-dev libjpeg-dev zlib1g-dev \
            libharfbuzz-dev libfribidi-dev \
            libsecret-1-dev libsecret-1-0

      - name: Verify script exists
        if: steps.window.outputs.ok == 'true'
        run: test -f .github/scripts/run.R

      - name: Install R packages (CRAN)
        if: steps.window.outputs.ok == 'true'
        run: |
          R -q -e "
          packages <- c(
            'DBI','bigrquery',
            'dplyr','tidyr','readr','stringr','purrr','tibble',
            'data.table','hms','lubridate',
            'httr','jsonlite','xml2','curl',
            'valdr','gargle',
            'rlang','lifecycle'
          )

          install.packages(packages, repos='https://packagemanager.posit.co/cran/__linux__/noble/latest', Ncpus = parallel::detectCores())

          # Verify all packages loaded successfully
          for(pkg in packages) {
            if(!require(pkg, character.only = TRUE, quietly = TRUE)) {
              stop(paste('Failed to load package:', pkg))
            }
          }

          cat('All packages installed and loaded successfully\n')
          "

      - name: Run R pipeline
        if: steps.window.outputs.ok == 'true'
        env:
          VALD_CLIENT_ID: ${{ secrets.VALD_CLIENT_ID }}
          VALD_CLIENT_SECRET: ${{ secrets.VALD_CLIENT_SECRET }}
          VALD_TENANT_ID: ${{ secrets.VALD_TENANT_ID }}
          VALD_REGION: use
        run: |
          if ! Rscript .github/scripts/run.R; then
            echo "R script failed with exit code $?"
            exit 1
          fi

      - name: Ensure BigQuery dataset exists
        if: steps.window.outputs.ok == 'true' && always()
        run: |
          bq mk --dataset --location=US "$GCP_PROJECT:$BQ_DATASET" || echo "Dataset already exists or creation failed"

      - name: Check processing logs
        if: steps.window.outputs.ok == 'true' && always()
        run: |
          bq query --use_legacy_sql=false --location=US --format=pretty \
            "SELECT timestamp, level, message 
             FROM \`$GCP_PROJECT.$BQ_DATASET.vald_processing_log\` 
             WHERE run_id = '${{ github.run_id }}' 
             ORDER BY timestamp DESC 
             LIMIT 20" || echo "No logs yet."

      - name: Create summary report
        if: steps.window.outputs.ok == 'true' && always()
        run: |
          bq query --use_legacy_sql=false --location=US --format=pretty \
            "SELECT level, COUNT(*) AS message_count 
             FROM \`$GCP_PROJECT.$BQ_DATASET.vald_processing_log\` 
             WHERE run_id = '${{ github.run_id }}' 
             GROUP BY level 
             ORDER BY level" || echo "No summary available."
