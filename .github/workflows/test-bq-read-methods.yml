name: Test BQ Read

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/884700516106/locations/global/workloadIdentityPools/gha-pool/providers/github
          service_account: gha-bq@sac-vald-hub.iam.gserviceaccount.com
          create_credentials_file: true
          token_format: 'access_token'
      
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      
      - name: Install packages
        run: R -q -e "install.packages(c('bigrquery','httr','gargle','dplyr'))"
      
      - name: Test REST API
        run: |
          Rscript -e '
          library(bigrquery); library(httr); library(gargle); library(dplyr)
          
          # Get token directly from gcloud
          access_token <- system("gcloud auth print-access-token", intern=TRUE)[1]
          cat("Token length:", nchar(access_token), "\n")
          
          # Create gargle token for bigrquery
          token <- gargle::gargle2.0_token(
            scope="https://www.googleapis.com/auth/bigquery",
            client=gargle::gargle_client(),
            credentials=list(access_token=access_token)
          )
          bq_auth(token=token)
          cat("bigrquery authenticated\n")
          
          # Make REST API call using the ORIGINAL access_token (not from bq_token)
          url <- "https://bigquery.googleapis.com/bigquery/v2/projects/sac-vald-hub/datasets/analytics/tables/dates/data?maxResults=3"
          resp <- GET(url, add_headers(Authorization=paste("Bearer", access_token)))
          
          if(http_error(resp)) {
            cat("FAILED:", status_code(resp), "\n")
            print(content(resp, "text"))
            quit(status=1)
          }
          
          cat("SUCCESS: REST API works!\n")
          data <- content(resp, "parsed")
          cat("Total rows in table:", data$totalRows, "\n")
          cat("Rows fetched:", length(data$rows), "\n")
          '
